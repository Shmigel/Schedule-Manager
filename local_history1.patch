Index: src/main/java/com/shmigel/scheduleManager/model/dialogflow/User.java
===================================================================
--- src/main/java/com/shmigel/scheduleManager/model/dialogflow/User.java	(date 0)
+++ src/main/java/com/shmigel/scheduleManager/model/dialogflow/User.java	(date 0)
@@ -1,30 +0,0 @@
-package com.shmigel.scheduleManager.model.dialogflow;
-
-import com.fasterxml.jackson.annotation.JsonCreator;
-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
-import com.fasterxml.jackson.annotation.JsonProperty;
-import lombok.Data;
-
-@Data
-@JsonIgnoreProperties(ignoreUnknown = true)
-public class User {
-
-    private String lastSeen;
-
-    private String accessToken;
-
-    private String locale;
-
-    @JsonCreator
-    public User(
-            @JsonProperty("lastSeen") String lastSeen,
-            @JsonProperty("accessToken") String accessToken,
-            @JsonProperty("locale") String locale) {
-        this.lastSeen = lastSeen;
-        this.accessToken = accessToken;
-        this.locale = locale;
-    }
-
-    public User() {
-    }
-}
Index: src/main/java/com/shmigel/scheduleManager/model/dialogflow/Response.java
===================================================================
--- src/main/java/com/shmigel/scheduleManager/model/dialogflow/Response.java	(date 0)
+++ src/main/java/com/shmigel/scheduleManager/model/dialogflow/Response.java	(date 0)
@@ -1,29 +0,0 @@
-package com.shmigel.scheduleManager.model.dialogflow;
-
-import lombok.Builder;
-import lombok.Data;
-
-import java.lang.reflect.Array;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-
-@Builder
-@Data
-public class Response {
-
-    public Response(String fulfillmentText) {
-        this.fulfillmentText = fulfillmentText;
-    }
-
-    public static Response getUnknownAnswer() {
-        return new Response("I don't understand you. Please try again");
-    }
-
-    public Response() {
-    }
-
-    private String fulfillmentText;
-
-}
Index: src/main/java/com/shmigel/scheduleManager/model/dialogflow/Request.java
===================================================================
--- src/main/java/com/shmigel/scheduleManager/model/dialogflow/Request.java	(date 0)
+++ src/main/java/com/shmigel/scheduleManager/model/dialogflow/Request.java	(date 0)
@@ -1,28 +0,0 @@
-package com.shmigel.scheduleManager.model.dialogflow;
-
-import com.fasterxml.jackson.annotation.JsonCreator;
-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
-import com.fasterxml.jackson.annotation.JsonProperty;
-import lombok.AllArgsConstructor;
-import lombok.Data;
-
-@Data
-
-@JsonIgnoreProperties(ignoreUnknown = true)
-public class Request {
-
-    private QueryResult queryResult;
-
-    private OriginalDetectIntentRequest originalDetectIntentRequest;
-
-    @JsonCreator
-    public Request(
-            @JsonProperty("queryResult") QueryResult queryResult,
-            @JsonProperty("originalDetectIntentRequest") OriginalDetectIntentRequest originalDetectIntentRequest) {
-        this.queryResult = queryResult;
-        this.originalDetectIntentRequest = originalDetectIntentRequest;
-    }
-
-    public Request() {
-    }
-}
Index: src/main/java/com/shmigel/scheduleManager/model/dialogflow/QueryResult.java
===================================================================
--- src/main/java/com/shmigel/scheduleManager/model/dialogflow/QueryResult.java	(date 0)
+++ src/main/java/com/shmigel/scheduleManager/model/dialogflow/QueryResult.java	(date 0)
@@ -1,33 +0,0 @@
-package com.shmigel.scheduleManager.model.dialogflow;
-
-import com.fasterxml.jackson.annotation.JsonCreator;
-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
-import com.fasterxml.jackson.annotation.JsonProperty;
-import lombok.Data;
-
-import java.util.HashMap;
-import java.util.Map;
-
-@Data
-@JsonIgnoreProperties(ignoreUnknown = true)
-public class QueryResult {
-
-    private String queryText;
-
-    private String action;
-
-    private Map<String, String> parameters = new HashMap<>();
-
-    public QueryResult() {
-    }
-
-    @JsonCreator
-    public QueryResult(
-            @JsonProperty("queryText") String queryText,
-            @JsonProperty("action") String action,
-            @JsonProperty("parameters") Map<String, String> parameters) {
-        this.queryText = queryText;
-        this.action = action;
-        this.parameters = parameters;
-    }
-}
Index: src/main/java/com/shmigel/scheduleManager/model/dialogflow/Payload.java
===================================================================
--- src/main/java/com/shmigel/scheduleManager/model/dialogflow/Payload.java	(date 0)
+++ src/main/java/com/shmigel/scheduleManager/model/dialogflow/Payload.java	(date 0)
@@ -1,23 +0,0 @@
-package com.shmigel.scheduleManager.model.dialogflow;
-
-import com.fasterxml.jackson.annotation.JsonCreator;
-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
-import com.fasterxml.jackson.annotation.JsonProperty;
-import lombok.AllArgsConstructor;
-import lombok.Data;
-
-@Data
-@JsonIgnoreProperties(ignoreUnknown = true)
-public class Payload {
-
-    private User user;
-
-    @JsonCreator
-    public Payload(
-            @JsonProperty("user") User user) {
-        this.user = user;
-    }
-
-    public Payload() {
-    }
-}
Index: src/main/java/com/shmigel/scheduleManager/model/dialogflow/OriginalDetectIntentRequest.java
===================================================================
--- src/main/java/com/shmigel/scheduleManager/model/dialogflow/OriginalDetectIntentRequest.java	(date 0)
+++ src/main/java/com/shmigel/scheduleManager/model/dialogflow/OriginalDetectIntentRequest.java	(date 0)
@@ -1,23 +0,0 @@
-package com.shmigel.scheduleManager.model.dialogflow;
-
-import com.fasterxml.jackson.annotation.JsonCreator;
-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
-import com.fasterxml.jackson.annotation.JsonProperty;
-import lombok.AllArgsConstructor;
-import lombok.Data;
-
-@Data
-@JsonIgnoreProperties(ignoreUnknown = true)
-public class OriginalDetectIntentRequest {
-
-    private Payload payload;
-
-    @JsonCreator
-    public OriginalDetectIntentRequest(
-            @JsonProperty("payload") Payload payload) {
-        this.payload = payload;
-    }
-
-    public OriginalDetectIntentRequest() {
-    }
-}
Index: src/main/java/com/shmigel/scheduleManager/model/EventController.java
===================================================================
--- src/main/java/com/shmigel/scheduleManager/model/EventController.java	(date 0)
+++ src/main/java/com/shmigel/scheduleManager/model/EventController.java	(date 0)
@@ -1,14 +0,0 @@
-package com.shmigel.scheduleManager.model;
-
-import org.springframework.stereotype.Component;
-
-import java.lang.annotation.ElementType;
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
-import java.lang.annotation.Target;
-
-@Component
-@Target(ElementType.TYPE)
-@Retention(RetentionPolicy.RUNTIME)
-public @interface EventController {
-}
Index: src/main/java/com/shmigel/scheduleManager/model/EventMapping.java
===================================================================
--- src/main/java/com/shmigel/scheduleManager/model/EventMapping.java	(date 0)
+++ src/main/java/com/shmigel/scheduleManager/model/EventMapping.java	(date 0)
@@ -1,14 +0,0 @@
-package com.shmigel.scheduleManager.model;
-
-import java.lang.annotation.ElementType;
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
-import java.lang.annotation.Target;
-
-@Target(ElementType.METHOD)
-@Retention(RetentionPolicy.RUNTIME)
-public @interface EventMapping {
-
-    String value() default "WELCOME_EVENT";
-
-}
Index: src/main/java/com/shmigel/scheduleManager/service/CalendarService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/shmigel/scheduleManager/service/CalendarService.java	(date 1537814842000)
+++ src/main/java/com/shmigel/scheduleManager/service/CalendarService.java	(date 1537814842000)
@@ -0,0 +1,66 @@
+package com.shmigel.scheduleManager.service;
+
+import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
+import com.google.api.client.http.javanet.NetHttpTransport;
+import com.google.api.client.json.jackson2.JacksonFactory;
+import com.google.api.client.util.DateTime;
+import com.google.api.services.calendar.Calendar;
+import com.google.api.services.calendar.model.CalendarListEntry;
+import com.google.api.services.calendar.model.Event;
+import com.google.api.services.calendar.model.Events;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.io.IOException;
+import java.util.List;
+
+import static java.util.stream.Collectors.toList;
+
+public class CalendarService {
+
+    private Calendar calendar;
+
+    private Logger logger = LoggerFactory.getLogger(CalendarService.class);
+
+    private static String defaultCalendarName = "ScheduleManagers' Calendar";
+
+    public CalendarService(JacksonFactory jacksonFactory,
+                           NetHttpTransport httpTransport, GoogleCredential googleCredential) {
+        calendar = new Calendar(httpTransport, jacksonFactory, googleCredential);
+    }
+
+    public void getCalendar() {
+        DateTime now = new DateTime(System.currentTimeMillis());
+        Events events = null;
+        try {
+            events = calendar.events().list("primary")
+                    .setMaxResults(10)
+                    .setTimeMin(now)
+                    .setOrderBy("startTime")
+                    .setSingleEvents(true)
+                    .execute();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        List<Event> items = events.getItems();
+        if (items.isEmpty()) {
+            System.out.println("No upcoming events found.");
+        } else {
+            System.out.println("Upcoming events");
+            for (Event event : items) {
+                DateTime start = event.getStart().getDateTime();
+                if (start == null) {
+                    start = event.getStart().getDate();
+                }
+                System.out.printf("%s (%s)\n", event.getSummary(), start);
+            }
+        }
+    }
+
+
+
+    private String  toPrettyString(CalendarListEntry entry) {
+        return entry.getId() +" "+ entry.getSummary() +"\n";
+    }
+
+}
Index: src/main/java/com/shmigel/scheduleManager/service/Auth0TokenService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/shmigel/scheduleManager/service/Auth0TokenService.java	(date 1537814244000)
+++ src/main/java/com/shmigel/scheduleManager/service/Auth0TokenService.java	(date 1537814244000)
@@ -0,0 +1,62 @@
+package com.shmigel.scheduleManager.service;
+
+import com.mashape.unirest.http.HttpResponse;
+import com.mashape.unirest.http.JsonNode;
+import com.mashape.unirest.http.Unirest;
+import com.mashape.unirest.http.exceptions.UnirestException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.stereotype.Service;
+
+/**
+ * Since request from dialogflow gives auth0 access token instead of google access token,
+ * we need to perform few additional request to get relevant access token
+ * witch we will use to access to google calendar api
+ */
+
+@Service
+public class Auth0TokenService {
+
+    private static Logger logger = LoggerFactory.getLogger(Auth0TokenService.class);
+
+    private String getUserId(String auth0Token) throws UnirestException {
+        HttpResponse<JsonNode> userInfoResponse = Unirest.get("https://schedule-manager.eu.auth0.com/userinfo")
+                .header("Authorization", "Bearer " + auth0Token).asJson();
+        return userInfoResponse.getBody().getObject().get("sub").toString();
+    }
+
+    private String getAuth0ManagerToken() throws UnirestException {
+        String preparedBody = "{\n" +
+                "\t\"grant_type\":\"client_credentials\",\n" +
+                "\t\"client_id\": \"0rAJ4EzAJAKOhTbQ5R63EMbd6oRfxyO1\",\n" +
+                "\t\"client_secret\": \"p_5XX3nmrXlBkZ9X084vQjkvy6ztg7xibg__TX1jRoZoG3upJGCKhfI29jF39zf8\",\n" +
+                "\t\"audience\": \"https://schedule-manager.eu.auth0.com/api/v2/\"\n" +
+                "}";
+        HttpResponse<JsonNode> auth0ManagerTokenResponse = Unirest.post("https://schedule-manager.eu.auth0.com/oauth/token")
+                .header("Content-Type", "application/json")
+                .body(preparedBody)
+                .asJson();
+        return auth0ManagerTokenResponse.getBody().getObject().get("access_token").toString();
+    }
+
+    private String getAccessToken(String userId, String auth0ManagerToken) throws UnirestException {
+        HttpResponse<JsonNode> accessTokenResonse = Unirest.get("https://schedule-manager.eu.auth0.com/api/v2/users/" + userId)
+                .header("Authorization", "Bearer " + auth0ManagerToken).asJson();
+        return accessTokenResonse.getBody().getObject()
+                .getJSONArray("identities").getJSONObject(0).get("access_token").toString();
+    }
+
+    public String load(String userToken) {
+        String accessToken = null;
+        try {
+            String userId = getUserId(userToken);
+            String auth0ManagerToken = getAuth0ManagerToken();
+            accessToken = getAccessToken(userId, auth0ManagerToken);
+            logger.info("userId:"+userId+" token:"+accessToken);
+        } catch (UnirestException e) {
+            e.printStackTrace();
+        }
+        return accessToken;
+    }
+
+}
Index: src/main/java/com/shmigel/scheduleManager/dialogflow/model/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/shmigel/scheduleManager/dialogflow/model/User.java	(date 1537706186000)
+++ src/main/java/com/shmigel/scheduleManager/dialogflow/model/User.java	(date 1537706186000)
@@ -0,0 +1,30 @@
+package com.shmigel.scheduleManager.dialogflow.model;
+
+import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
+import com.fasterxml.jackson.annotation.JsonProperty;
+import lombok.Data;
+
+@Data
+@JsonIgnoreProperties(ignoreUnknown = true)
+public class User {
+
+    private String lastSeen;
+
+    private String accessToken;
+
+    private String locale;
+
+    @JsonCreator
+    public User(
+            @JsonProperty("lastSeen") String lastSeen,
+            @JsonProperty("accessToken") String accessToken,
+            @JsonProperty("locale") String locale) {
+        this.lastSeen = lastSeen;
+        this.accessToken = accessToken;
+        this.locale = locale;
+    }
+
+    public User() {
+    }
+}
Index: src/main/java/com/shmigel/scheduleManager/dialogflow/model/annotation/EventMapping.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/shmigel/scheduleManager/dialogflow/model/annotation/EventMapping.java	(date 1537706186000)
+++ src/main/java/com/shmigel/scheduleManager/dialogflow/model/annotation/EventMapping.java	(date 1537706186000)
@@ -0,0 +1,14 @@
+package com.shmigel.scheduleManager.dialogflow.model.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@Target(ElementType.METHOD)
+@Retention(RetentionPolicy.RUNTIME)
+public @interface EventMapping {
+
+    String value() default "WELCOME_EVENT";
+
+}
Index: src/main/java/com/shmigel/scheduleManager/dialogflow/model/annotation/EventController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/shmigel/scheduleManager/dialogflow/model/annotation/EventController.java	(date 1537706186000)
+++ src/main/java/com/shmigel/scheduleManager/dialogflow/model/annotation/EventController.java	(date 1537706186000)
@@ -0,0 +1,14 @@
+package com.shmigel.scheduleManager.dialogflow.model.annotation;
+
+import org.springframework.stereotype.Component;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@Component
+@Target(ElementType.TYPE)
+@Retention(RetentionPolicy.RUNTIME)
+public @interface EventController {
+}
Index: src/main/java/com/shmigel/scheduleManager/dialogflow/model/Payload.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/shmigel/scheduleManager/dialogflow/model/Payload.java	(date 1537706186000)
+++ src/main/java/com/shmigel/scheduleManager/dialogflow/model/Payload.java	(date 1537706186000)
@@ -0,0 +1,22 @@
+package com.shmigel.scheduleManager.dialogflow.model;
+
+import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
+import com.fasterxml.jackson.annotation.JsonProperty;
+import lombok.Data;
+
+@Data
+@JsonIgnoreProperties(ignoreUnknown = true)
+public class Payload {
+
+    private User user;
+
+    @JsonCreator
+    public Payload(
+            @JsonProperty("user") User user) {
+        this.user = user;
+    }
+
+    public Payload() {
+    }
+}
Index: src/main/java/com/shmigel/scheduleManager/dialogflow/model/Request.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/shmigel/scheduleManager/dialogflow/model/Request.java	(date 1537706186000)
+++ src/main/java/com/shmigel/scheduleManager/dialogflow/model/Request.java	(date 1537706186000)
@@ -0,0 +1,27 @@
+package com.shmigel.scheduleManager.dialogflow.model;
+
+import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
+import com.fasterxml.jackson.annotation.JsonProperty;
+import lombok.Data;
+
+@Data
+
+@JsonIgnoreProperties(ignoreUnknown = true)
+public class Request {
+
+    private QueryResult queryResult;
+
+    private OriginalDetectIntentRequest originalDetectIntentRequest;
+
+    @JsonCreator
+    public Request(
+            @JsonProperty("queryResult") QueryResult queryResult,
+            @JsonProperty("originalDetectIntentRequest") OriginalDetectIntentRequest originalDetectIntentRequest) {
+        this.queryResult = queryResult;
+        this.originalDetectIntentRequest = originalDetectIntentRequest;
+    }
+
+    public Request() {
+    }
+}
Index: src/main/java/com/shmigel/scheduleManager/dialogflow/model/Response.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/shmigel/scheduleManager/dialogflow/model/Response.java	(date 1537706186000)
+++ src/main/java/com/shmigel/scheduleManager/dialogflow/model/Response.java	(date 1537706186000)
@@ -0,0 +1,23 @@
+package com.shmigel.scheduleManager.dialogflow.model;
+
+import lombok.Builder;
+import lombok.Data;
+
+@Builder
+@Data
+public class Response {
+
+    public Response(String fulfillmentText) {
+        this.fulfillmentText = fulfillmentText;
+    }
+
+    public static Response getUnknownAnswer() {
+        return new Response("I don't understand you. Please try again");
+    }
+
+    public Response() {
+    }
+
+    private String fulfillmentText;
+
+}
Index: src/main/java/com/shmigel/scheduleManager/dialogflow/model/QueryResult.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/shmigel/scheduleManager/dialogflow/model/QueryResult.java	(date 1537706186000)
+++ src/main/java/com/shmigel/scheduleManager/dialogflow/model/QueryResult.java	(date 1537706186000)
@@ -0,0 +1,33 @@
+package com.shmigel.scheduleManager.dialogflow.model;
+
+import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
+import com.fasterxml.jackson.annotation.JsonProperty;
+import lombok.Data;
+
+import java.util.HashMap;
+import java.util.Map;
+
+@Data
+@JsonIgnoreProperties(ignoreUnknown = true)
+public class QueryResult {
+
+    private String queryText;
+
+    private String action;
+
+    private Map<String, String> parameters = new HashMap<>();
+
+    public QueryResult() {
+    }
+
+    @JsonCreator
+    public QueryResult(
+            @JsonProperty("queryText") String queryText,
+            @JsonProperty("action") String action,
+            @JsonProperty("parameters") Map<String, String> parameters) {
+        this.queryText = queryText;
+        this.action = action;
+        this.parameters = parameters;
+    }
+}
Index: src/main/java/com/shmigel/scheduleManager/dialogflow/model/OriginalDetectIntentRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/shmigel/scheduleManager/dialogflow/model/OriginalDetectIntentRequest.java	(date 1537706186000)
+++ src/main/java/com/shmigel/scheduleManager/dialogflow/model/OriginalDetectIntentRequest.java	(date 1537706186000)
@@ -0,0 +1,22 @@
+package com.shmigel.scheduleManager.dialogflow.model;
+
+import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
+import com.fasterxml.jackson.annotation.JsonProperty;
+import lombok.Data;
+
+@Data
+@JsonIgnoreProperties(ignoreUnknown = true)
+public class OriginalDetectIntentRequest {
+
+    private Payload payload;
+
+    @JsonCreator
+    public OriginalDetectIntentRequest(
+            @JsonProperty("payload") Payload payload) {
+        this.payload = payload;
+    }
+
+    public OriginalDetectIntentRequest() {
+    }
+}
Index: src/main/java/com/shmigel/scheduleManager/dialogflow/DialogflowConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/shmigel/scheduleManager/dialogflow/DialogflowConfig.java	(date 1537706291000)
+++ src/main/java/com/shmigel/scheduleManager/dialogflow/DialogflowConfig.java	(date 1537706291000)
@@ -0,0 +1,26 @@
+package com.shmigel.scheduleManager.dialogflow;
+
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+import java.util.Set;
+
+@Configuration
+public class DialogflowConfig {
+
+    @Bean
+    DialogflowEventControllerListener dialogflowEventControllerListener() {
+        return new DialogflowEventControllerListener();
+    }
+
+    @Bean
+    Set<MethodWrapper> methods(DialogflowEventControllerListener dialogflowEventControllerListener) {
+        return dialogflowEventControllerListener.getMethodWrappers();
+    }
+
+    @Bean
+    DialogflowEventControllerInvoker dialogflowEventControllerInvoker() {
+        return new DialogflowEventControllerInvoker();
+    }
+
+}
Index: src/main/java/com/shmigel/scheduleManager/dialogflow/DialogflowEventControllerInvoker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/shmigel/scheduleManager/dialogflow/DialogflowEventControllerInvoker.java	(date 1537706291000)
+++ src/main/java/com/shmigel/scheduleManager/dialogflow/DialogflowEventControllerInvoker.java	(date 1537706291000)
@@ -0,0 +1,60 @@
+package com.shmigel.scheduleManager.dialogflow;
+
+import com.shmigel.scheduleManager.dialogflow.model.Request;
+import com.shmigel.scheduleManager.dialogflow.model.Response;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.beans.factory.BeanFactory;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.util.ReflectionUtils;
+
+import java.lang.reflect.Method;
+import java.util.Iterator;
+import java.util.Set;
+
+public class DialogflowEventControllerInvoker {
+
+    private Logger logger = LoggerFactory.getLogger(DialogflowEventControllerInvoker.class);
+
+    @Autowired
+    private BeanFactory beanFactory;
+
+    @Autowired
+    private Set<MethodWrapper> methodWrappers;
+
+    /**
+     * Try to find method to process given request by comparing methods' annotation and request action parameter.
+     *
+     * If method has one parameter, he's suggesting that it's parameters of the request,
+     * and send requests' parameters as argue,
+     * If method has more than one parameter he, by now, can't fill they, and throwing {@link RuntimeException},
+     * If has not parameters just invoking the method
+     *
+     * @param request given request
+     * @return Response of invoked method if any
+     */
+    public Response invokeProperMethod(Request request) {
+        Iterator<MethodWrapper> iterator = methodWrappers.iterator();
+        Response response = Response.getUnknownAnswer();
+        while (iterator.hasNext()) {
+            MethodWrapper wrapper = iterator.next();
+            if (request.getQueryResult().getAction().equals(wrapper.getAction())) {
+                Method method = wrapper.getMethod();
+                logger.debug("Find proper method: {} for processing request", method);
+                if (method.getParameterCount() == 1) {
+                     response = (Response) ReflectionUtils.invokeMethod(method,
+                             beanFactory.getBean(method.getDeclaringClass()),
+                             request.getQueryResult().getParameters());
+                } else if(method.getParameterCount() == 0) {
+                     response = (Response) ReflectionUtils.invokeMethod(method,
+                             beanFactory.getBean(method.getDeclaringClass()));
+                } else {
+                    throw new RuntimeException("Can't fill methods' parameters");
+                }
+
+            }
+        }
+        return response;
+    }
+
+}
Index: src/main/java/com/shmigel/scheduleManager/dialogflow/DialogflowEventControllerListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/shmigel/scheduleManager/dialogflow/DialogflowEventControllerListener.java	(date 1537706291000)
+++ src/main/java/com/shmigel/scheduleManager/dialogflow/DialogflowEventControllerListener.java	(date 1537706291000)
@@ -0,0 +1,65 @@
+package com.shmigel.scheduleManager.dialogflow;
+
+import com.shmigel.scheduleManager.dialogflow.model.annotation.EventController;
+import com.shmigel.scheduleManager.dialogflow.model.annotation.EventMapping;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import org.springframework.beans.factory.BeanFactory;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.ApplicationContext;
+import org.springframework.context.ApplicationListener;
+import org.springframework.context.event.ContextRefreshedEvent;
+
+import java.lang.reflect.Method;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+
+public class DialogflowEventControllerListener implements ApplicationListener<ContextRefreshedEvent> {
+
+    @Autowired
+    private BeanFactory beanFactory;
+
+    private Set<MethodWrapper> methodWrappers = new HashSet<>();
+
+    /**
+     * Register methods that might process dialogflow request
+     *
+     * Methods should be annotated {@link EventMapping}
+     * and locate in classes annotated {@link EventController}
+     *
+     * Each proper method saving in methodWrappers
+     *
+     * @param event
+     */
+    @Override
+    public void onApplicationEvent(ContextRefreshedEvent event) {
+        ApplicationContext context = event.getApplicationContext();
+        Map<String, Object> beansWithAnnotation = context.getBeansWithAnnotation(EventController.class);
+        beansWithAnnotation.forEach((i, j) -> {
+            Method[] methods = beanFactory.getBean(i).getClass().getMethods();
+            if (methods != null) {
+                for (Method method : methods) {
+                    EventMapping annotation = method.getAnnotation(EventMapping.class);
+                    if (annotation != null) {
+                        methodWrappers.add(new MethodWrapper(method, annotation.value()));
+                    }
+                }
+            }
+        });
+        methodWrappers.forEach(System.out::println);
+    }
+
+    public Set<MethodWrapper> getMethodWrappers() {
+        return methodWrappers;
+    }
+}
+
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+class MethodWrapper {
+    private Method method;
+    private String action;
+}
Index: src/main/java/com/shmigel/scheduleManager/DEPRECATEDGoogleCalendar.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/shmigel/scheduleManager/DEPRECATEDGoogleCalendar.java	(date 1537705462000)
+++ src/main/java/com/shmigel/scheduleManager/DEPRECATEDGoogleCalendar.java	(date 1537705462000)
@@ -0,0 +1,79 @@
+package com.shmigel.scheduleManager;
+
+import com.google.api.services.calendar.Calendar;
+import com.google.api.services.calendar.model.CalendarListEntry;
+import com.google.api.services.calendar.model.Event;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.beans.factory.annotation.Autowired;
+
+import java.io.IOException;
+import java.util.List;
+import java.util.Optional;
+
+import static java.util.stream.Collectors.toList;
+
+//@Service
+//@Lazy
+public class DEPRECATEDGoogleCalendar {
+
+    private static Logger logger = LoggerFactory.getLogger(DEPRECATEDGoogleCalendar.class);
+
+    private static String defaultCalendarName = "ScheduleManagers' Calendar";
+
+    @Autowired
+    Calendar calendar;
+
+    public List<CalendarListEntry> getCalendars() {
+        List<CalendarListEntry> items = null;
+        try {
+            items = calendar.calendarList().list().execute().getItems();
+            logger.debug("Loaded {} calendars: {}", items.size(), items.stream()
+                    .map(this::toPrettyString).collect(toList()));
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return items;
+    }
+
+    private void createCalendar(CalendarListEntry entry) {
+        try {
+            calendar.calendarList().insert(entry);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+
+    private void insertEvent(String calendarId, Event event) {
+        try {
+            calendar.events().insert(calendarId, event);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+
+    private String isCalendarPresent() {
+        Optional<CalendarListEntry> entry = Optional.empty();
+        for (CalendarListEntry i : getCalendars()) {
+            if (i.getSummary().equals(defaultCalendarName)) {
+                logger.debug("Found calendar with default name: {}", defaultCalendarName);
+                entry = Optional.of(i);
+            }
+        }
+        return entry.map(CalendarListEntry::getId).orElse("");
+    }
+
+    public void addEvent(Event event) {
+        String calendarId = isCalendarPresent();
+        insertEvent(calendarId, event);
+    }
+
+    private String  toPrettyString(CalendarListEntry entry) {
+        return entry.getId() +" "+ entry.getSummary() +"\n";
+    }
+
+    public String createSchedule() {
+        return isCalendarPresent();
+    }
+
+}
Index: src/main/java/com/shmigel/scheduleManager/controller/BaseController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/shmigel/scheduleManager/controller/BaseController.java	(date 1537706346000)
+++ src/main/java/com/shmigel/scheduleManager/controller/BaseController.java	(date 1537706346000)
@@ -1,18 +1,13 @@
 package com.shmigel.scheduleManager.controller;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
-import com.shmigel.scheduleManager.BeansConfiguration;
-import com.shmigel.scheduleManager.GoogleCalendar;
-import com.shmigel.scheduleManager.config.DialogflowEventControllerInvoker;
-import com.shmigel.scheduleManager.model.dialogflow.Request;
-import com.shmigel.scheduleManager.model.dialogflow.Response;
-import lombok.Setter;
+import com.shmigel.scheduleManager.config.GoogleBeanConfiguration;
+import com.shmigel.scheduleManager.dialogflow.DialogflowEventControllerInvoker;
+import com.shmigel.scheduleManager.dialogflow.model.Request;
+import com.shmigel.scheduleManager.dialogflow.model.Response;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Scope;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.ResponseEntity;
 import org.springframework.stereotype.Controller;
@@ -33,7 +28,7 @@
     private DialogflowEventControllerInvoker controllerInvoker;
 
     @Autowired
-    private BeansConfiguration beansConfiguration;
+    private GoogleBeanConfiguration configuration;
 
     @RequestMapping(value = "/", method = RequestMethod.GET)
     public ResponseEntity<?> testGetMethod() {
@@ -42,15 +37,19 @@
 
     @RequestMapping(value = "/", method = RequestMethod.POST)
     public ResponseEntity<Response> baseController(@RequestBody String body, @RequestHeader HttpHeaders headers) {
-        logger.debug("Post request with headers: {}, and body: {}",headers, body);
+        logger.debug("Post request with headers: {}, and body: {}", headers, body);
         Request request = getRequest(body);
-        Optional<String> accessToken = Optional.ofNullable(request.getOriginalDetectIntentRequest().getPayload().getUser().getAccessToken());
-        beansConfiguration.setAccessToken(accessToken.orElseThrow(RuntimeException::new));
+        setAccessToken(request);
         Response response = controllerInvoker.invokeProperMethod(request);
         logger.debug("Response: {}", response);
         return ResponseEntity.ok(response);
     }
 
+    private void setAccessToken(Request request) {
+        Optional<String> accessToken = Optional.ofNullable(request.getOriginalDetectIntentRequest().getPayload().getUser().getAccessToken());
+        configuration.setAuth0Token(accessToken.orElseThrow(RuntimeException::new));
+    }
+
     private Request getRequest(String body) {
         Request r = null;
          try {
Index: src/main/java/com/shmigel/scheduleManager/controller/DialogflowEventController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/shmigel/scheduleManager/controller/DialogflowEventController.java	(date 1537814883000)
+++ src/main/java/com/shmigel/scheduleManager/controller/DialogflowEventController.java	(date 1537814883000)
@@ -1,12 +1,9 @@
 package com.shmigel.scheduleManager.controller;
 
-import com.google.api.client.util.DateTime;
-import com.google.api.services.calendar.model.Event;
-import com.google.api.services.calendar.model.EventDateTime;
-import com.shmigel.scheduleManager.GoogleCalendar;
-import com.shmigel.scheduleManager.model.EventController;
-import com.shmigel.scheduleManager.model.EventMapping;
-import com.shmigel.scheduleManager.model.dialogflow.Response;
+import com.shmigel.scheduleManager.service.CalendarService;
+import com.shmigel.scheduleManager.dialogflow.model.annotation.EventController;
+import com.shmigel.scheduleManager.dialogflow.model.annotation.EventMapping;
+import com.shmigel.scheduleManager.dialogflow.model.Response;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.annotation.Lazy;
 
@@ -18,12 +15,12 @@
 
     @Lazy
     @Autowired
-    private GoogleCalendar c;
+    private CalendarService calendar;
 
     @EventMapping("TEST_EVENT")
     public Response testEvent() {
 
-        return new Response("Test is successful");
+        return new Response("OnResponse is successful");
     }
 
     @EventMapping("ADD_EVENT")
@@ -33,7 +30,7 @@
 
     @EventMapping("CREATE_SCHEDULE")
     public Response createSchedule() throws IOException {
-        System.out.println(c.getCalendars());
+        calendar.getCalendar();
         return new Response("Schedule's created");
     }
 
Index: src/main/java/com/shmigel/scheduleManager/config/BeansConfiguration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/shmigel/scheduleManager/config/BeansConfiguration.java	(date 1537706346000)
+++ src/main/java/com/shmigel/scheduleManager/config/BeansConfiguration.java	(date 1537706346000)
@@ -0,0 +1,40 @@
+package com.shmigel.scheduleManager.config;
+
+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
+import com.google.api.client.http.javanet.NetHttpTransport;
+import com.google.api.client.json.jackson2.JacksonFactory;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.context.annotation.*;
+import org.springframework.web.client.RestTemplate;
+
+import java.io.IOException;
+import java.security.GeneralSecurityException;
+
+@Configuration
+public class BeansConfiguration {
+
+    private static Logger logger = LoggerFactory.getLogger(BeansConfiguration.class);
+
+    @Bean
+    RestTemplate restTemplate() {
+        return new RestTemplate();
+    }
+
+    @Bean
+    JacksonFactory jacksonFactory() {
+        return JacksonFactory.getDefaultInstance();
+    }
+
+    @Bean
+    NetHttpTransport netHttpTransport() {
+        NetHttpTransport httpTransport = null;
+        try {
+            httpTransport = GoogleNetHttpTransport.newTrustedTransport();
+        } catch (GeneralSecurityException | IOException e) {
+            e.printStackTrace();
+        }
+        return httpTransport;
+    }
+
+}
Index: src/main/java/com/shmigel/scheduleManager/config/GoogleBeanConfiguration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/shmigel/scheduleManager/config/GoogleBeanConfiguration.java	(date 1537707506000)
+++ src/main/java/com/shmigel/scheduleManager/config/GoogleBeanConfiguration.java	(date 1537707506000)
@@ -0,0 +1,42 @@
+package com.shmigel.scheduleManager.config;
+
+import com.google.api.client.auth.oauth2.TokenResponse;
+import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
+import com.google.api.client.http.javanet.NetHttpTransport;
+import com.google.api.client.json.jackson2.JacksonFactory;
+import com.shmigel.scheduleManager.service.CalendarService;
+import com.shmigel.scheduleManager.service.Auth0TokenService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Scope;
+
+@Configuration
+public class GoogleBeanConfiguration {
+
+    private String accessToken;
+
+    @Autowired
+    private Auth0TokenService tokenManager;
+
+    public void setAuth0Token(String auth0Token) {
+        String accessToken = tokenManager.load(auth0Token);
+        this.accessToken = accessToken;
+    }
+
+    @Bean
+    @Scope("prototype")
+    GoogleCredential googleCredential() {
+        accessToken.toString();
+        return new GoogleCredential().setFromTokenResponse(new TokenResponse().setAccessToken(accessToken));
+    }
+
+    @Bean
+    @Scope("prototype")
+    CalendarService googleCalendar(JacksonFactory factory,
+                                   NetHttpTransport httpTransport,
+                                   GoogleCredential credential) {
+        return new CalendarService(factory, httpTransport, credential);
+    }
+
+}
Index: src/main/java/com/shmigel/scheduleManager/config/DialogflowConfig.java
===================================================================
--- src/main/java/com/shmigel/scheduleManager/config/DialogflowConfig.java	(date 0)
+++ src/main/java/com/shmigel/scheduleManager/config/DialogflowConfig.java	(date 0)
@@ -1,26 +0,0 @@
-package com.shmigel.scheduleManager.config;
-
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-
-import java.util.Set;
-
-@Configuration
-public class DialogflowConfig {
-
-    @Bean
-    DialogflowEventControllerListener dialogflowEventControllerListener() {
-        return new DialogflowEventControllerListener();
-    }
-
-    @Bean
-    Set<MethodWrapper> methods(DialogflowEventControllerListener dialogflowEventControllerListener) {
-        return dialogflowEventControllerListener.getMethodWrappers();
-    }
-
-    @Bean
-    DialogflowEventControllerInvoker dialogflowEventControllerInvoker() {
-        return new DialogflowEventControllerInvoker();
-    }
-
-}
Index: src/main/java/com/shmigel/scheduleManager/config/DialogflowEventControllerInvoker.java
===================================================================
--- src/main/java/com/shmigel/scheduleManager/config/DialogflowEventControllerInvoker.java	(date 0)
+++ src/main/java/com/shmigel/scheduleManager/config/DialogflowEventControllerInvoker.java	(date 0)
@@ -1,60 +0,0 @@
-package com.shmigel.scheduleManager.config;
-
-import com.shmigel.scheduleManager.model.dialogflow.Request;
-import com.shmigel.scheduleManager.model.dialogflow.Response;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.springframework.beans.factory.BeanFactory;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.util.ReflectionUtils;
-
-import java.lang.reflect.Method;
-import java.util.Iterator;
-import java.util.Set;
-
-public class DialogflowEventControllerInvoker {
-
-    private Logger logger = LoggerFactory.getLogger(DialogflowEventControllerInvoker.class);
-
-    @Autowired
-    private BeanFactory beanFactory;
-
-    @Autowired
-    private Set<MethodWrapper> methodWrappers;
-
-    /**
-     * Try to find method to process given request by comparing methods' annotation and request action parameter.
-     *
-     * If method has one parameter, he's suggesting that it's parameters of the request,
-     * and send requests' parameters as argue,
-     * If method has more than one parameter he, by now, can't fill they, and throwing {@link RuntimeException},
-     * If has not parameters just invoking the method
-     *
-     * @param request given request
-     * @return Response of invoked method if any
-     */
-    public Response invokeProperMethod(Request request) {
-        Iterator<MethodWrapper> iterator = methodWrappers.iterator();
-        Response response = Response.getUnknownAnswer();
-        while (iterator.hasNext()) {
-            MethodWrapper wrapper = iterator.next();
-            if (request.getQueryResult().getAction().equals(wrapper.getAction())) {
-                Method method = wrapper.getMethod();
-                logger.debug("Find proper method: {} for processing request", method);
-                if (method.getParameterCount() == 1) {
-                     response = (Response) ReflectionUtils.invokeMethod(method,
-                             beanFactory.getBean(method.getDeclaringClass()),
-                             request.getQueryResult().getParameters());
-                } else if(method.getParameterCount() == 0) {
-                     response = (Response) ReflectionUtils.invokeMethod(method,
-                             beanFactory.getBean(method.getDeclaringClass()));
-                } else {
-                    throw new RuntimeException("Can't fill methods' parameters");
-                }
-
-            }
-        }
-        return response;
-    }
-
-}
Index: src/main/java/com/shmigel/scheduleManager/config/DialogflowEventControllerListener.java
===================================================================
--- src/main/java/com/shmigel/scheduleManager/config/DialogflowEventControllerListener.java	(date 0)
+++ src/main/java/com/shmigel/scheduleManager/config/DialogflowEventControllerListener.java	(date 0)
@@ -1,65 +0,0 @@
-package com.shmigel.scheduleManager.config;
-
-import com.shmigel.scheduleManager.model.EventController;
-import com.shmigel.scheduleManager.model.EventMapping;
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-import org.springframework.beans.factory.BeanFactory;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.context.ApplicationContext;
-import org.springframework.context.ApplicationListener;
-import org.springframework.context.event.ContextRefreshedEvent;
-
-import java.lang.reflect.Method;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.Set;
-
-public class DialogflowEventControllerListener implements ApplicationListener<ContextRefreshedEvent> {
-
-    @Autowired
-    private BeanFactory beanFactory;
-
-    private Set<MethodWrapper> methodWrappers = new HashSet<>();
-
-    /**
-     * Register methods that might process dialogflow request
-     *
-     * Methods should be annotated {@link EventMapping}
-     * and locate in classes annotated {@link EventController}
-     *
-     * Each proper method saving in methodWrappers
-     *
-     * @param event
-     */
-    @Override
-    public void onApplicationEvent(ContextRefreshedEvent event) {
-        ApplicationContext context = event.getApplicationContext();
-        Map<String, Object> beansWithAnnotation = context.getBeansWithAnnotation(EventController.class);
-        beansWithAnnotation.forEach((i, j) -> {
-            Method[] methods = beanFactory.getBean(i).getClass().getMethods();
-            if (methods != null) {
-                for (Method method : methods) {
-                    EventMapping annotation = method.getAnnotation(EventMapping.class);
-                    if (annotation != null) {
-                        methodWrappers.add(new MethodWrapper(method, annotation.value()));
-                    }
-                }
-            }
-        });
-        methodWrappers.forEach(System.out::println);
-    }
-
-    public Set<MethodWrapper> getMethodWrappers() {
-        return methodWrappers;
-    }
-}
-
-@Data
-@AllArgsConstructor
-@NoArgsConstructor
-class MethodWrapper {
-    private Method method;
-    private String action;
-}
Index: src/main/java/com/shmigel/scheduleManager/config/Auth0TokenManager.java
===================================================================
--- src/main/java/com/shmigel/scheduleManager/config/Auth0TokenManager.java	(date 0)
+++ src/main/java/com/shmigel/scheduleManager/config/Auth0TokenManager.java	(date 0)
@@ -1,76 +0,0 @@
-package com.shmigel.scheduleManager.config;
-
-import okhttp3.*;
-//import org.json.JSONException;
-//import org.json.JSONObject;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.springframework.stereotype.Component;
-
-import java.io.IOException;
-
-@Component
-public class Auth0TokenManager {
-
-//    private String authToken = "";
-//    private String accessToken = "";
-
-    private Logger logger = LoggerFactory.getLogger(Auth0TokenManager.class);
-
-    public void setAuthToken(String authToken) {
-        logger.debug("New authToken: {}",authToken);
-
-//        this.authToken = authToken;
-    }
-
-    public static void main(String[] args) throws IOException {
-        OkHttpClient client = new OkHttpClient();
-        RequestBody body = new FormBody.Builder()
-//                .add()
-                .build();
-
-        Request f = new Request.Builder()
-                .url("https://schedule-manager.eu.auth0.com/userinfo")
-                .header("Authorization", "Bearer Os8sU88oCrme43jupcZJM8KXGC96ygk_")
-                .build();
-        Response execute = client.newCall(f).execute();
-        System.out.println("first: "+ execute.body());
-    }
-
-//    public void getAccessToken() {
-//        OkHttpClient client = new OkHttpClient();
-//        RequestBody e = new FormBody.Builder().build();
-//        RequestBody requestBody = new FormBody.Builder()
-//                .add("grant_type", "authorization_code")
-//                .add("client_id", )
-//                .add("client_secret", )
-//                .add("code", accessToken)
-//                .add()
-//                .build();
-//        final Request request = new Request.Builder()
-//                .url("https://www.googleapis.com/oauth2/v4/token")
-//                .header("Content-Type", "application/x-www-form-urlencoded")
-//                .header("", "")
-//                .post(requestBody)
-//                .build();
-//        client.newCall(request).enqueue(new Callback() {
-//            @Override
-//            public void onFailure(Call call, IOException e) {
-//
-//            }
-//
-//            @Override
-//            public void onResponse(Call call, Response response) throws IOException {
-//                try {
-//                    JSONObject jsonObject = new JSONObject(response.body().string());
-//                    String  mAccessToken = jsonObject.get("access_token").toString();
-//                    String  mTokenType = jsonObject.get("token_type").toString();
-//                    String  mRefreshToken = jsonObject.get("refresh_token").toString();
-//                } catch (JSONException e) {
-//                    e.printStackTrace();
-//                }
-//            }
-//        });
-//    }
-
-}
Index: src/main/java/com/shmigel/scheduleManager/GoogleCalendar.java
===================================================================
--- src/main/java/com/shmigel/scheduleManager/GoogleCalendar.java	(date 0)
+++ src/main/java/com/shmigel/scheduleManager/GoogleCalendar.java	(date 0)
@@ -1,84 +0,0 @@
-package com.shmigel.scheduleManager;
-
-import com.google.api.client.json.GenericJson;
-import com.google.api.services.calendar.Calendar;
-import com.google.api.services.calendar.model.CalendarListEntry;
-import com.google.api.services.calendar.model.Event;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.context.annotation.Lazy;
-import org.springframework.stereotype.Service;
-
-import java.io.IOException;
-import java.util.AbstractMap;
-import java.util.List;
-import java.util.Optional;
-
-import static java.util.stream.Collectors.toList;
-
-@Service
-@Lazy
-public class GoogleCalendar {
-
-    private static Logger logger = LoggerFactory.getLogger(GoogleCalendar.class);
-
-    private static String defaultCalendarName = "ScheduleManagers' Calendar";
-
-    @Lazy
-    @Autowired
-    Calendar calendar;
-
-    public List<CalendarListEntry> getCalendars() {
-        List<CalendarListEntry> items = null;
-        try {
-            items = calendar.calendarList().list().execute().getItems();
-            logger.debug("Loaded {} calendars: {}", items.size(), items.stream()
-                    .map(this::toPrettyString).collect(toList()));
-        } catch (IOException e) {
-            e.printStackTrace();
-        }
-        return items;
-    }
-
-    private void createCalendar(CalendarListEntry entry) {
-        try {
-            calendar.calendarList().insert(entry);
-        } catch (IOException e) {
-            e.printStackTrace();
-        }
-    }
-
-    private void insertEvent(String calendarId, Event event) {
-        try {
-            calendar.events().insert(calendarId, event);
-        } catch (IOException e) {
-            e.printStackTrace();
-        }
-    }
-
-    private String isCalendarPresent() {
-        Optional<CalendarListEntry> entry = Optional.empty();
-        for (CalendarListEntry i : getCalendars()) {
-            if (i.getSummary().equals(defaultCalendarName)) {
-                logger.debug("Found calendar with default name: {}", defaultCalendarName);
-                entry = Optional.of(i);
-            }
-        }
-        return entry.map(CalendarListEntry::getId).orElse("");
-    }
-
-    public void addEvent(Event event) {
-        String calendarId = isCalendarPresent();
-        insertEvent(calendarId, event);
-    }
-
-    private String  toPrettyString(CalendarListEntry entry) {
-        return entry.getId() +" "+ entry.getSummary() +"\n";
-    }
-
-    public String createSchedule() {
-        return isCalendarPresent();
-    }
-
-}
Index: src/main/java/com/shmigel/scheduleManager/ScheduleManagerApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/shmigel/scheduleManager/ScheduleManagerApplication.java	(date 1537706169000)
+++ src/main/java/com/shmigel/scheduleManager/ScheduleManagerApplication.java	(date 1537706169000)
@@ -1,20 +1,10 @@
 package com.shmigel.scheduleManager;
 
-import com.shmigel.scheduleManager.config.DialogflowConfig;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
-import org.springframework.context.annotation.Import;
-import org.springframework.context.event.ContextRefreshedEvent;
-import org.springframework.context.event.EventListener;
-import org.springframework.http.ResponseEntity;
 import org.springframework.stereotype.Controller;
-import org.springframework.web.bind.annotation.RequestBody;
-
-import javax.annotation.PostConstruct;
-import java.io.IOException;
 
 @SpringBootApplication
 @Controller
Index: src/main/java/com/shmigel/scheduleManager/BeansConfiguration.java
===================================================================
--- src/main/java/com/shmigel/scheduleManager/BeansConfiguration.java	(date 0)
+++ src/main/java/com/shmigel/scheduleManager/BeansConfiguration.java	(date 0)
@@ -1,69 +0,0 @@
-package com.shmigel.scheduleManager;
-
-import com.google.api.client.auth.oauth2.TokenResponse;
-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
-import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
-import com.google.api.client.http.javanet.NetHttpTransport;
-import com.google.api.client.json.jackson2.JacksonFactory;
-import com.google.api.services.calendar.Calendar;
-import com.shmigel.scheduleManager.config.Auth0TokenManager;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.context.annotation.*;
-import org.springframework.web.client.RestTemplate;
-
-import java.io.IOException;
-import java.security.GeneralSecurityException;
-
-@Configuration
-public class BeansConfiguration {
-
-    private static Logger logger = LoggerFactory.getLogger(BeansConfiguration.class);
-
-//    @Autowired
-//    private Auth0TokenManager accessToken;
-
-    private String  accessToken;
-
-    public void setAccessToken(String accessToken) {
-        this.accessToken = accessToken;
-    }
-
-    @Bean
-    @Lazy
-    @Scope("prototype")
-    Calendar calendar(JacksonFactory jacksonFactory,
-                      NetHttpTransport netHttpTransport,
-                      GoogleCredential googleCredential) {
-        return new Calendar(netHttpTransport, jacksonFactory, googleCredential);
-    }
-
-    @Bean
-    @Lazy
-    @Scope("prototype")
-    GoogleCredential googleCredential() {
-        return new GoogleCredential().setFromTokenResponse(new TokenResponse().setAccessToken(accessToken));
-    }
-
-    @Bean
-    RestTemplate restTemplate() {
-        return new RestTemplate();
-    }
-
-    @Bean
-    NetHttpTransport netHttpTransport() {
-        NetHttpTransport httpTransport = null;
-        try {
-            httpTransport = GoogleNetHttpTransport.newTrustedTransport();
-        } catch (GeneralSecurityException | IOException e) {
-            e.printStackTrace();
-        }
-        return httpTransport;
-    }
-
-    @Bean
-    JacksonFactory jacksonFactory() {
-        return JacksonFactory.getDefaultInstance();
-    }
-}
Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/application.properties	(date 1537703378000)
+++ src/main/resources/application.properties	(date 1537703378000)
@@ -1,1 +1,2 @@
-logging.level.com.shmigel=DEBUG
\ No newline at end of file
+logging.level.com.shmigel=DEBUG
+auth0.accessToken=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ik1ERTVOa0pDUlRJMU1qQkJSak5FTUVGR1JqQTRORU16TnpWR016a3hNemcxTVRFM01UWTJNQSJ9.eyJpc3MiOiJodHRwczovL3NjaGVkdWxlLW1hbmFnZXIuZXUuYXV0aDAuY29tLyIsInN1YiI6IjByQUo0RXpBSkFLT2hUYlE1UjYzRU1iZDZvUmZ4eU8xQGNsaWVudHMiLCJhdWQiOiJodHRwczovL3NjaGVkdWxlLW1hbmFnZXIuZXUuYXV0aDAuY29tL2FwaS92Mi8iLCJpYXQiOjE1Mzc1NTYxMjgsImV4cCI6MTUzNzY0MjUyOCwiYXpwIjoiMHJBSjRFekFKQUtPaFRiUTVSNjNFTWJkNm9SZnh5TzEiLCJzY29wZSI6InJlYWQ6dXNlcnMgcmVhZDp1c2VyX2lkcF90b2tlbnMiLCJndHkiOiJjbGllbnQtY3JlZGVudGlhbHMifQ.aZELoUiHOwd3IZaCjp_hT6fOJ0rXAn6JcC3c0Xnr9s8WvG5GOh_oDmU5HsV7rw4CxtYreazFQylb-MzhGv3h1Q0YV27hZSYYxCE55u0inF8bWU9_xXeVV0sPMB_2V5DteGrjlv_eh0zBZ1c5AmvFFwS_MnV_upDdQ8bsyk4bFqlwv0cbbr2RIIWM_5GBe19cyQVL-K0JPDfxl187EftVrITgM4sSkRPUgKQWqvNVsyzUz1jwKCfhErEjjLW_cEKOGzysnlD5Bi5lZAmJFA2Zne4dOViHKZdJfop6L_OzBjB2D3bv2mVMIET4QVbq6btR6uhOOEwMC_mfP3wGDOZ6sQ
\ No newline at end of file
Index: src/test/java/com/shmigel/scheduleManager/ScheduleManagerApplicationTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/com/shmigel/scheduleManager/ScheduleManagerApplicationTests.java	(date 1537808824000)
+++ src/test/java/com/shmigel/scheduleManager/ScheduleManagerApplicationTests.java	(date 1537808824000)
@@ -0,0 +1,142 @@
+package com.shmigel.scheduleManager;
+
+import com.fasterxml.jackson.core.JsonProcessingException;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.shmigel.scheduleManager.dialogflow.model.*;
+import com.shmigel.scheduleManager.service.Auth0TokenService;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.test.context.junit4.SpringRunner;
+import org.springframework.test.web.servlet.MockMvc;
+
+import static org.junit.Assert.*;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
+
+import org.springframework.test.web.servlet.MvcResult;
+
+import java.io.IOException;
+import java.util.Collections;
+import java.util.Map;
+
+@RunWith(SpringRunner.class)
+@SpringBootTest
+@AutoConfigureMockMvc
+public class ScheduleManagerApplicationTests {
+
+	private static Logger logger = LoggerFactory.getLogger(ScheduleManagerApplicationTests.class);
+
+	@Autowired
+	private MockMvc mockMvc;
+
+	@Autowired
+	private Auth0TokenService tokenManager;
+
+	private static String prepareJson = "{\n" +
+			"  \"responseId\": \"b0e90e8a-344e-43bc-a5b7-e81e47731d68\",\n" +
+			"  \"queryResult\": {\n" +
+			"    \"queryText\": \"do test\",\n" +
+			"    \"action\": \"TEST_EVENT\",\n" +
+			"    \"parameters\": {},\n" +
+			"    \"allRequiredParamsPresent\": true,\n" +
+			"    \"fulfillmentMessages\": [\n" +
+			"      {\n" +
+			"        \"text\": {\n" +
+			"          \"text\": [\n" +
+			"            \"\"\n" +
+			"          ]\n" +
+			"        }\n" +
+			"      }\n" +
+			"    ],\n" +
+			"    \"intent\": {\n" +
+			"      \"name\": \"projects/schedule-manager-a6180/agent/intents/02c8eae7-46f7-45f9-ab4d-d8c9e5204243\",\n" +
+			"      \"displayName\": \"OnResponse\"\n" +
+			"    },\n" +
+			"    \"intentDetectionConfidence\": 1,\n" +
+			"    \"languageCode\": \"en\"\n" +
+			"  },\n" +
+			"  \"originalDetectIntentRequest\": {\n" +
+			"    \"payload\": {}\n" +
+			"  },\n" +
+			"  \"session\": \"projects/schedule-manager-a6180/agent/sessions/8db5ea0d-f5c9-acf2-ee17-f6067f29dbb6\"\n" +
+			"}";
+
+	private String jsonOf(Object o) {
+		String json = "";
+		try {
+			json = new ObjectMapper().writeValueAsString(o);
+		} catch (JsonProcessingException e) {
+			e.printStackTrace();
+		}
+		return json;
+	}
+
+	private String token = "ygGF7_9APnQUnDa5TAaqlP2EqB4xBSZb";
+
+	private Request request(String action) {
+		return new Request(
+				new QueryResult(action, action, null),
+				new OriginalDetectIntentRequest(new Payload(new User("TIME", token, "UK")))
+		);
+	}
+
+	private Request requestWithParameters(String action, Map<String, String> parameters) {
+		return new Request(
+				new QueryResult(action, action , parameters),
+				new OriginalDetectIntentRequest(new Payload(new User("TIME", token, "UK")))
+		);
+	}
+
+	@Test
+	public void getController() throws Exception {
+		MvcResult test = mockMvc.perform(get("/")).andExpect(status().isOk()).andReturn();
+		logger.info("Return form get request: {}", test.getResponse().getContentAsString());
+	}
+
+	@Test
+	public void jsonMapping() throws IOException {
+		Request request = new ObjectMapper().readValue(prepareJson, Request.class);
+		logger.info("Get object: {}", request.toString());
+	}
+
+	@Test
+	public void baseController() throws Exception {
+		MvcResult result = mockMvc.perform(post("/").contentType("application/json")
+				.content(jsonOf(request("CREATE_SCHEDULE"))))
+				.andExpect(status().isOk()).andReturn();
+		String contentAsString = result.getResponse().getContentAsString();
+		assertNotNull(contentAsString);
+		logger.info("Return from post request {}", contentAsString);
+	}
+
+	@Test
+	public void control() throws Exception {
+		MvcResult result = mockMvc.perform(post("/").contentType("application/json")
+				.content(jsonOf(request("TEST_EVENT"))))
+				.andExpect(status().isOk()).andReturn();
+		String content = result.getResponse().getContentAsString();
+		assertNotNull(content);
+		logger.debug("Returned from request:"+content);
+	}
+
+	@Test
+	public void testTokenManager() {
+		String load = tokenManager.load(token);
+		logger.debug("Receive accessToken:"+ load);
+	}
+
+	@Test
+	public void rawJsonTest() throws Exception {
+		MvcResult result = mockMvc.perform(post("/").contentType("application/json")
+				.content(jsonOf(requestWithParameters("ADD_USER", Collections.singletonMap("EMAIL", "sh@mail.com")))))
+				.andExpect(status().isOk()).andReturn();
+		String contentAsString = result.getResponse().getContentAsString();
+		logger.info("Return from post request {}", contentAsString);
+	}
+
+}
Index: src/test/java/com/shmigel/scheduleManager/schedulemanager/ScheduleManagerApplicationTests.java
===================================================================
--- src/test/java/com/shmigel/scheduleManager/schedulemanager/ScheduleManagerApplicationTests.java	(date 0)
+++ src/test/java/com/shmigel/scheduleManager/schedulemanager/ScheduleManagerApplicationTests.java	(date 0)
@@ -1,131 +0,0 @@
-package com.shmigel.scheduleManager.schedulemanager;
-
-import com.fasterxml.jackson.core.JsonProcessingException;
-import com.fasterxml.jackson.databind.ObjectMapper;
-import com.shmigel.scheduleManager.model.dialogflow.*;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
-import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.test.context.junit4.SpringRunner;
-import org.springframework.test.web.servlet.MockMvc;
-
-import static org.junit.Assert.*;
-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
-
-import org.springframework.test.web.servlet.MvcResult;
-
-import java.io.IOException;
-import java.util.Collections;
-import java.util.Map;
-
-@RunWith(SpringRunner.class)
-@SpringBootTest
-@AutoConfigureMockMvc
-public class ScheduleManagerApplicationTests {
-
-	private static Logger logger = LoggerFactory.getLogger(ScheduleManagerApplicationTests.class);
-
-	@Autowired
-	private MockMvc mockMvc;
-
-	private static String prepareJson = "{\n" +
-			"  \"responseId\": \"b0e90e8a-344e-43bc-a5b7-e81e47731d68\",\n" +
-			"  \"queryResult\": {\n" +
-			"    \"queryText\": \"do test\",\n" +
-			"    \"action\": \"TEST_EVENT\",\n" +
-			"    \"parameters\": {},\n" +
-			"    \"allRequiredParamsPresent\": true,\n" +
-			"    \"fulfillmentMessages\": [\n" +
-			"      {\n" +
-			"        \"text\": {\n" +
-			"          \"text\": [\n" +
-			"            \"\"\n" +
-			"          ]\n" +
-			"        }\n" +
-			"      }\n" +
-			"    ],\n" +
-			"    \"intent\": {\n" +
-			"      \"name\": \"projects/schedule-manager-a6180/agent/intents/02c8eae7-46f7-45f9-ab4d-d8c9e5204243\",\n" +
-			"      \"displayName\": \"Test\"\n" +
-			"    },\n" +
-			"    \"intentDetectionConfidence\": 1,\n" +
-			"    \"languageCode\": \"en\"\n" +
-			"  },\n" +
-			"  \"originalDetectIntentRequest\": {\n" +
-			"    \"payload\": {}\n" +
-			"  },\n" +
-			"  \"session\": \"projects/schedule-manager-a6180/agent/sessions/8db5ea0d-f5c9-acf2-ee17-f6067f29dbb6\"\n" +
-			"}";
-
-	private String jsonOf(Object o) {
-		String json = "";
-		try {
-			json = new ObjectMapper().writeValueAsString(o);
-		} catch (JsonProcessingException e) {
-			e.printStackTrace();
-		}
-		return json;
-	}
-
-	private String token = "ya29.GlsJBkfN573GR4m8vkP4VvGoaP0KvN0ti00iz7Ya2pRfKsvXOJFTIllwAnhrOluxR9WNf_GYav-URpg2giD1y6P8WJhWCnzMbiTNe-MBH2wIUmS3MER6IwFSNhOs";
-
-	private Request request(String action) {
-		return new Request(
-				new QueryResult(action, action, null),
-				new OriginalDetectIntentRequest(new Payload(new User("TIME", token, "UK")))
-		);
-	}
-
-	private Request requestWithParameters(String action, Map<String, String> parameters) {
-		return new Request(
-				new QueryResult(action, action , parameters),
-				new OriginalDetectIntentRequest(new Payload(new User("TIME", token, "UK")))
-		);
-	}
-
-	@Test
-	public void getController() throws Exception {
-		MvcResult test = mockMvc.perform(get("/")).andExpect(status().isOk()).andReturn();
-		logger.info("Return form get request: {}", test.getResponse().getContentAsString());
-		//		Request request1 = new Request(
-//				new OriginalDetectIntentRequest(
-//						new Payload(
-//								new User("123", "123", "123")
-//						)
-//					)
-//				);
-//		String s = new ObjectMapper().writeValueAsString(request1);
-//		logger.info("Make json: {}", s);
-	}
-
-	@Test
-	public void jsonMapping() throws IOException {
-		Request request = new ObjectMapper().readValue(prepareJson, Request.class);
-		logger.info("Get object: {}", request.toString());
-	}
-
-	@Test
-	public void baseController() throws Exception {
-		MvcResult result = mockMvc.perform(post("/").contentType("application/json")
-				.content(jsonOf(request("CREATE_SCHEDULE"))))
-				.andExpect(status().isOk()).andReturn();
-		String contentAsString = result.getResponse().getContentAsString();
-		assertNotNull(contentAsString);
-		logger.info("Return from post request {}", contentAsString);
-	}
-
-	@Test
-	public void rawJsonTest() throws Exception {
-		MvcResult result = mockMvc.perform(post("/").contentType("application/json")
-				.content(jsonOf(requestWithParameters("ADD_USER", Collections.singletonMap("EMAIL", "sh@mail.com")))))
-				.andExpect(status().isOk()).andReturn();
-		String contentAsString = result.getResponse().getContentAsString();
-		logger.info("Return from post request {}", contentAsString);
-	}
-
-}
